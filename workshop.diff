diff --git a/preprocessing/mtat_read.py b/preprocessing/mtat_read.py
index 2b1856d..5aac9c7 100644
--- a/preprocessing/mtat_read.py
+++ b/preprocessing/mtat_read.py
@@ -7,32 +7,33 @@ import tqdm
 
 
 class Processor:
-	def __init__(self):
-		self.fs = 16000
+    def __init__(self):
+        self.fs = 16000
 
-	def get_paths(self, data_path):
-		self.files = glob.glob(os.path.join(data_path, 'mtat', 'mp3', '*/*.mp3'))
-		self.npy_path = os.path.join(data_path, 'mtat', 'npy')
-		if not os.path.exists(self.npy_path):
-			os.makedirs(self.npy_path)
+    def get_paths(self, data_path):
+        self.files = glob.glob(os.path.join(data_path, 'mtat', 'mp3', '*/*.mp3'))
+        self.npy_path = os.path.join(data_path, 'mtat', 'npy')
+        if not os.path.exists(self.npy_path):
+            os.makedirs(self.npy_path)
 
-	def get_npy(self, fn):
-                x, sr = librosa.core.load(fn, sr=self.fs)
-		return x
+    def get_npy(self, fn):
+        x, sr = librosa.core.load(fn, sr=self.fs)
+        return(x)
 
-	def iterate(self, data_path):
-		self.get_paths(data_path)
-		for fn in tqdm.tqdm(self.files):
-			npy_fn = os.path.join(self.npy_path, fn.split('/')[-1][:-3]+'npy')
-			if not os.path.exists(npy_fn):
-				try:
-					x = self.get_npy(fn)
-					np.save(open(npy_fn, 'wb'), x)
-				except RuntimeError:
-					# some audio files are broken
-					print(fn)
-					continue
+    def iterate(self, data_path):
+        self.get_paths(data_path)
+        for fn in tqdm.tqdm(self.files):
+            npy_fn = os.path.join(self.npy_path, fn.split('/')[-1][:-3]+'npy')
+            if not os.path.exists(npy_fn):
+                try:
+                    x = self.get_npy(fn)
+                    np.save(open(npy_fn, 'wb'), x)
+                except Exception:
+                    # some audio files are broken
+                    print("fail to parse file:",fn)
+                    continue
+                    
 
 if __name__ == '__main__':
-	p = Processor()
-	fire.Fire({'run': p.iterate})
+    p = Processor()
+    fire.Fire({'run': p.iterate})
diff --git a/training/data_loader/mtat_loader.py b/training/data_loader/mtat_loader.py
index 848af09..d539944 100644
--- a/training/data_loader/mtat_loader.py
+++ b/training/data_loader/mtat_loader.py
@@ -13,7 +13,9 @@ class AudioFolder(data.Dataset):
 
 	def __getitem__(self, index):
 		npy, tag_binary = self.get_npy(index)
+		
 		return npy.astype('float32'), tag_binary.astype('float32')
+		
 
 	def get_songlist(self):
 		if self.split == 'TRAIN':
@@ -27,11 +29,15 @@ class AudioFolder(data.Dataset):
 
 	def get_npy(self, index):
 		ix, fn = self.fl[index].split('\t')
-		npy_path = os.path.join(self.root, 'mtat', 'npy', fn.split('/')[1][:-3]) + 'npy'
-		npy = np.load(npy_path, mmap_mode='r')
-		random_idx = int(np.floor(np.random.random(1) * (len(npy)-self.input_length)))
-		npy = np.array(npy[random_idx:random_idx+self.input_length])
-		tag_binary = self.binary[int(ix)]
+		npy, tag_binary = np.array([]), np.array([])
+		try: 
+			npy_path = os.path.join(self.root, 'mtat', 'npy', fn.split('/')[1][:-3]) + 'npy'
+			npy = np.load(npy_path, mmap_mode='r', allow_pickle=True)
+			random_idx = int(np.floor(np.random.random(1) * (len(npy)-self.input_length)))
+			npy = np.array(npy[random_idx:random_idx+self.input_length])
+			tag_binary = self.binary[int(ix)]
+		except Exception: 
+			print("faile to parse file:", fn)
 		return npy, tag_binary
 
 	def __len__(self):
diff --git a/training/main.py b/training/main.py
index 1a70864..bc2434d 100644
--- a/training/main.py
+++ b/training/main.py
@@ -52,6 +52,7 @@ if __name__ == '__main__':
     parser.add_argument('--model_load_path', type=str, default='.')
     parser.add_argument('--data_path', type=str, default='./data')
     parser.add_argument('--log_step', type=int, default=20)
+    parser.add_argument('--fine_tune', type=int, default=0)
 
     config = parser.parse_args()
 
diff --git a/training/solver.py b/training/solver.py
index 9beedc0..2e7952d 100644
--- a/training/solver.py
+++ b/training/solver.py
@@ -69,6 +69,7 @@ class Solver(object):
         self.log_step = config.log_step
         self.batch_size = config.batch_size
         self.model_type = config.model_type
+        self.fine_tune = config.fine_tune
 
         # cuda
         self.is_cuda = torch.cuda.is_available()
@@ -122,6 +123,9 @@ class Solver(object):
     def build_model(self):
         # model
         self.model = self.get_model()
+        if self.fine_tune == 1: 
+            for param in list(self.model.parameters())[:-1]:
+                param.requires_grad = False
 
         # cuda
         if self.is_cuda:
@@ -162,6 +166,8 @@ class Solver(object):
             drop_counter += 1
             self.model = self.model.train()
             for x, y in self.data_loader:
+                if len(x) == 0 or len(y)==0:
+                    continue 
                 ctr += 1
                 # Forward
                 x = self.to_var(x)
